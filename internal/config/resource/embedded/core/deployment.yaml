apiVersion: kubewatch.io/v1
kind: ResourceDefinition
metadata:
  name: deployment
  description: Kubernetes Deployment resource
  icon: 
spec:
  # Kubernetes API information
  kubernetes:
    group: apps
    version: v1
    kind: Deployment
    plural: deployments
    namespaced: true
    
  # Column definitions for table display
  columns:
    - name: NAME
      width: 30
      priority: 1
      template: "{{ .metadata.name }}"
      sortable: true
      
    - name: NAMESPACE
      width: 20
      priority: 2
      condition: "showNamespace"
      template: |
        {{- if hasPrefix .metadata.namespace "kube-" -}}
          {{- color "blue" .metadata.namespace -}}
        {{- else if eq .metadata.namespace "default" -}}
          {{- color "gray" .metadata.namespace -}}
        {{- else -}}
          {{- .metadata.namespace -}}
        {{- end -}}
      sortable: true
      
    - name: READY
      width: 8
      priority: 1
      align: center
      template: |
        {{- $ready := .status.readyReplicas | default 0 -}}
        {{- $desired := .spec.replicas | default 1 -}}
        {{- if eq $ready $desired -}}
          {{- color "green" (printf "%d/%d" $ready $desired) -}}
        {{- else if eq $ready 0 -}}
          {{- color "red" (printf "%d/%d" $ready $desired) -}}
        {{- else -}}
          {{- color "yellow" (printf "%d/%d" $ready $desired) -}}
        {{- end -}}
      sortable: true
      sortKey: "readyRatio"
      
    - name: UP-TO-DATE
      width: 12
      priority: 1
      align: center
      template: |
        {{- $updated := .status.updatedReplicas | default 0 -}}
        {{- $desired := .spec.replicas | default 1 -}}
        {{- if eq $updated $desired -}}
          {{- color "green" (toString $updated) -}}
        {{- else -}}
          {{- color "yellow" (toString $updated) -}}
        {{- end -}}
      sortable: true
      
    - name: AVAILABLE
      width: 10
      priority: 1
      align: center
      template: |
        {{- $available := .status.availableReplicas | default 0 -}}
        {{- $desired := .spec.replicas | default 1 -}}
        {{- if eq $available $desired -}}
          {{- color "green" (toString $available) -}}
        {{- else if eq $available 0 -}}
          {{- color "red" (toString $available) -}}
        {{- else -}}
          {{- color "yellow" (toString $available) -}}
        {{- end -}}
      sortable: true
      
    - name: AGE
      width: 10
      priority: 1
      template: |
        {{- $age := .metadata.creationTimestamp | ago -}}
        {{- $ageSeconds := .metadata.creationTimestamp | ageInSeconds -}}
        
        {{- if lt $ageSeconds 300 -}}
          {{- color "cyan" $age -}}
        {{- else if lt $ageSeconds 3600 -}}
          {{- color "green" $age -}}
        {{- else if lt $ageSeconds 86400 -}}
          {{- color "white" $age -}}
        {{- else -}}
          {{- color "gray" $age -}}
        {{- end -}}
      sortable: true
      sortKey: "creationTimestamp"
      
    - name: CONTAINERS
      width: 25
      priority: 2
      template: |
        {{- $containers := list -}}
        {{- range .spec.template.spec.containers -}}
          {{- $containers = append $containers .name -}}
        {{- end -}}
        {{- if gt (len $containers) 3 -}}
          {{- printf "%s... (%d total)" (join (slice $containers 0 3) ",") (len $containers) -}}
        {{- else -}}
          {{- join $containers "," -}}
        {{- end -}}
      sortable: false
      
    - name: IMAGES
      width: 40
      priority: 3
      template: |
        {{- $images := list -}}
        {{- range .spec.template.spec.containers -}}
          {{- $img := .image -}}
          {{- /* Shorten image names for display */ -}}
          {{- if contains "/" $img -}}
            {{- $parts := split "/" $img -}}
            {{- $img = index $parts (sub (len $parts) 1) -}}
          {{- end -}}
          {{- if contains ":" $img -}}
            {{- $parts := split ":" $img -}}
            {{- $name := index $parts 0 -}}
            {{- $tag := index $parts 1 -}}
            {{- if gt (len $tag) 7 -}}
              {{- $tag = printf "%s..." (slice $tag 0 7) -}}
            {{- end -}}
            {{- $img = printf "%s:%s" $name $tag -}}
          {{- end -}}
          {{- $images = append $images $img -}}
        {{- end -}}
        {{- if gt (len $images) 2 -}}
          {{- printf "%s... (%d images)" (join (slice $images 0 2) ",") (len $images) -}}
        {{- else -}}
          {{- join $images "," -}}
        {{- end -}}
      sortable: false
      
    - name: SELECTOR
      width: 30
      priority: 3
      template: |
        {{- $selectors := list -}}
        {{- range $key, $value := .spec.selector.matchLabels -}}
          {{- $selectors = append $selectors (printf "%s=%s" $key $value) -}}
        {{- end -}}
        {{- if gt (len $selectors) 2 -}}
          {{- printf "%s..." (join (slice $selectors 0 2) ",") -}}
        {{- else -}}
          {{- join $selectors "," -}}
        {{- end -}}
      sortable: false
      
    - name: STRATEGY
      width: 15
      priority: 4
      template: |
        {{- $strategy := .spec.strategy.type | default "RollingUpdate" -}}
        {{- if eq $strategy "RollingUpdate" -}}
          {{- color "green" "‚Üª Rolling" -}}
        {{- else if eq $strategy "Recreate" -}}
          {{- color "yellow" "‚ôª Recreate" -}}
        {{- else -}}
          {{- $strategy -}}
        {{- end -}}
      sortable: true
      
  # Operations available for this resource
  operations:
    - name: describe
      key: "d"
      description: "Describe deployment"
      command: "kubectl describe deployment {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: scale
      key: "s"
      description: "Scale deployment"
      command: "kubectl scale deployment {{ .metadata.name }} -n {{ .metadata.namespace }} --replicas="
      interactive: true
      prompt: "Enter number of replicas:"
      
    - name: restart
      key: "r"
      description: "Restart deployment"
      command: "kubectl rollout restart deployment {{ .metadata.name }} -n {{ .metadata.namespace }}"
      confirm: true
      confirmMessage: "Restart deployment {{ .metadata.name }}?"
      
    - name: rollout-status
      key: "R"
      description: "Check rollout status"
      command: "kubectl rollout status deployment {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: rollout-history
      key: "h"
      description: "View rollout history"
      command: "kubectl rollout history deployment {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: edit
      key: "E"
      description: "Edit deployment"
      command: "kubectl edit deployment {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: delete
      key: "x"
      description: "Delete deployment"
      confirm: true
      confirmMessage: "Delete deployment {{ .metadata.name }}? This will delete all pods."
      command: "kubectl delete deployment {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: logs
      key: "l"
      description: "View logs from all pods"
      command: "kubectl logs -l {{ range $k, $v := .spec.selector.matchLabels }}{{ $k }}={{ $v }}{{ end }} -n {{ .metadata.namespace }}"
      
  # Grouping configuration
  grouping:
    enabled: true
    groupBy:
      - field: ".metadata.labels.app"
        name: "Application"
        icon: "üì¶"
      - field: ".metadata.labels.environment"
        name: "Environment"
        icon: "üåç"
      - field: ".metadata.labels.team"
        name: "Team"
        icon: "üë•"
    aggregations:
      - column: "READY"
        function: "sum"
        format: "{{ .ready }}/{{ .total }} replicas"
      - column: "AVAILABLE"
        function: "sum"
        format: "{{ . }} available"
        
  # Filtering options
  filters:
    - name: "Healthy Only"
      key: "h"
      condition: |
        {{- $ready := .status.readyReplicas | default 0 -}}
        {{- $desired := .spec.replicas | default 1 -}}
        {{- eq $ready $desired -}}
    - name: "Unhealthy"
      key: "u"
      condition: |
        {{- $ready := .status.readyReplicas | default 0 -}}
        {{- $desired := .spec.replicas | default 1 -}}
        {{- ne $ready $desired -}}
    - name: "Scaled Down"
      key: "0"
      condition: |
        {{- $replicas := .spec.replicas | default 1 -}}
        {{- eq $replicas 0 -}}