apiVersion: kubewatch.io/v1
kind: ResourceDefinition
metadata:
  name: pod
  description: Kubernetes Pod resource
  icon: 
spec:
  # Kubernetes API information
  kubernetes:
    group: ""  # core API group
    version: v1
    kind: Pod
    plural: pods
    namespaced: true
    
  # Column definitions for table display
  columns:
    - name: NAME
      width: 30
      priority: 1  # Always shown
      template: "{{ .metadata.name }}"
      sortable: true
      
    - name: NAMESPACE
      width: 20
      priority: 2
      condition: "showNamespace"  # Only show when viewing all namespaces
      template: |
        {{- if hasPrefix .metadata.namespace "kube-" -}}
          {{- color "blue" .metadata.namespace -}}
        {{- else if eq .metadata.namespace "default" -}}
          {{- color "gray" .metadata.namespace -}}
        {{- else -}}
          {{- .metadata.namespace -}}
        {{- end -}}
      sortable: true
      
    - name: READY
      width: 8
      priority: 1
      align: center
      template: |
        {{- $ready := 0 -}}
        {{- $total := len .status.containerStatuses -}}
        {{- range .status.containerStatuses -}}
          {{- if .ready -}}{{- $ready = add $ready 1 -}}{{- end -}}
        {{- end -}}
        {{- if eq $ready $total -}}
          {{- color "green" (printf "%d/%d" $ready $total) -}}
        {{- else if eq $ready 0 -}}
          {{- color "red" (printf "%d/%d" $ready $total) -}}
        {{- else -}}
          {{- color "yellow" (printf "%d/%d" $ready $total) -}}
        {{- end -}}
      sortable: true
      sortKey: "readyRatio"
      
    - name: STATUS
      width: 20
      priority: 1
      template: |
        {{- $status := .status.phase -}}
        {{- $reason := "" -}}
        
        {{- /* Check for more specific status from conditions */ -}}
        {{- range .status.conditions -}}
          {{- if and (eq .type "Ready") (ne .status "True") .reason -}}
            {{- $reason = .reason -}}
          {{- end -}}
        {{- end -}}
        
        {{- /* Check container statuses for waiting/terminated states */ -}}
        {{- range .status.containerStatuses -}}
          {{- if .state.waiting -}}
            {{- $status = .state.waiting.reason -}}
          {{- else if .state.terminated -}}
            {{- $status = .state.terminated.reason -}}
          {{- end -}}
        {{- end -}}
        
        {{- /* Apply appropriate styling based on status */ -}}
        {{- if eq $status "Running" -}}
          {{- color "green" "● Running" -}}
        {{- else if eq $status "Succeeded" -}}
          {{- color "green" "✓ Succeeded" -}}
        {{- else if eq $status "Pending" -}}
          {{- color "yellow" "◐ Pending" -}}
        {{- else if eq $status "ContainerCreating" -}}
          {{- color "yellow" "◑ Creating" -}}
        {{- else if eq $status "Terminating" -}}
          {{- color "magenta" "◉ Terminating" -}}
        {{- else if or (eq $status "Failed") (eq $status "Error") -}}
          {{- color "red" (printf "✗ %s" $status) -}}
        {{- else if eq $status "CrashLoopBackOff" -}}
          {{- color "red" "↻ CrashLoop" -}}
        {{- else if eq $status "ImagePullBackOff" -}}
          {{- color "red" "⬇ ImagePull" -}}
        {{- else if eq $status "ErrImagePull" -}}
          {{- color "red" "⬇ ImageErr" -}}
        {{- else if eq $status "Completed" -}}
          {{- color "blue" "☐ Completed" -}}
        {{- else if eq $status "Evicted" -}}
          {{- color "yellow" "⚠ Evicted" -}}
        {{- else -}}
          {{- color "gray" (printf "○ %s" $status) -}}
        {{- end -}}
      sortable: true
      
    - name: RESTARTS
      width: 12
      priority: 1
      align: right
      template: |
        {{- $restarts := 0 -}}
        {{- $lastRestart := "" -}}
        
        {{- /* Sum up all container restarts */ -}}
        {{- range .status.containerStatuses -}}
          {{- $restarts = add $restarts .restartCount -}}
          {{- if .lastState.terminated -}}
            {{- $lastRestart = .lastState.terminated.finishedAt | ago -}}
          {{- end -}}
        {{- end -}}
        
        {{- /* Format based on restart count */ -}}
        {{- if eq $restarts 0 -}}
          {{- color "gray" "0" -}}
        {{- else -}}
          {{- $text := toString $restarts -}}
          {{- if $lastRestart -}}
            {{- $text = printf "%d (%s)" $restarts $lastRestart -}}
          {{- end -}}
          
          {{- if lt $restarts 3 -}}
            {{- color "yellow" $text -}}
          {{- else if lt $restarts 10 -}}
            {{- color "orange" (printf "⚠ %s" $text) -}}
          {{- else -}}
            {{- color "red" (printf "‼ %s" $text) -}}
          {{- end -}}
        {{- end -}}
      sortable: true
      sortKey: "restartCount"
      
    - name: AGE
      width: 10
      priority: 1
      template: |
        {{- $age := .metadata.creationTimestamp | ago -}}
        {{- $ageSeconds := .metadata.creationTimestamp | ageInSeconds -}}
        
        {{- if lt $ageSeconds 300 -}}
          {{- color "cyan" $age -}}
        {{- else if lt $ageSeconds 3600 -}}
          {{- color "green" $age -}}
        {{- else if lt $ageSeconds 86400 -}}
          {{- color "white" $age -}}
        {{- else -}}
          {{- color "gray" $age -}}
        {{- end -}}
      sortable: true
      sortKey: "creationTimestamp"
      
    - name: CPU
      width: 10
      priority: 2
      align: right
      condition: "showMetrics"
      template: |
        {{- $cpu := .metrics.cpu | default 0 -}}
        {{- if eq $cpu 0 -}}
          {{- color "gray" "-" -}}
        {{- else -}}
          {{- $cpuMilli := $cpu | toMillicores -}}
          {{- $requested := 0 -}}
          
          {{- /* Get CPU request if available */ -}}
          {{- range .spec.containers -}}
            {{- $requested = add $requested (.resources.requests.cpu | toMillicores | default 0) -}}
          {{- end -}}
          
          {{- /* Calculate percentage if request is set */ -}}
          {{- $percent := 0 -}}
          {{- if gt $requested 0 -}}
            {{- $percent = div (mul $cpuMilli 100) $requested -}}
          {{- end -}}
          
          {{- /* Format and color based on usage */ -}}
          {{- if and (gt $percent 0) (gt $percent 90) -}}
            {{- color "red" (printf "%dm" $cpuMilli) -}}
          {{- else if and (gt $percent 0) (gt $percent 70) -}}
            {{- color "yellow" (printf "%dm" $cpuMilli) -}}
          {{- else -}}
            {{- color "green" (printf "%dm" $cpuMilli) -}}
          {{- end -}}
        {{- end -}}
      sortable: true
      sortKey: "cpuUsage"
      
    - name: MEMORY
      width: 10
      priority: 2
      align: right
      condition: "showMetrics"
      template: |
        {{- $memory := .metrics.memory | default 0 -}}
        {{- if eq $memory 0 -}}
          {{- color "gray" "-" -}}
        {{- else -}}
          {{- $memoryMB := $memory | toMB -}}
          {{- $requested := 0 -}}
          
          {{- /* Get memory request if available */ -}}
          {{- range .spec.containers -}}
            {{- $requested = add $requested (.resources.requests.memory | toMB | default 0) -}}
          {{- end -}}
          
          {{- /* Calculate percentage if request is set */ -}}
          {{- $percent := 0 -}}
          {{- if gt $requested 0 -}}
            {{- $percent = div (mul $memoryMB 100) $requested -}}
          {{- end -}}
          
          {{- /* Format with appropriate units and color */ -}}
          {{- $formatted := $memory | humanizeBytes -}}
          {{- if and (gt $percent 0) (gt $percent 90) -}}
            {{- color "red" $formatted -}}
          {{- else if and (gt $percent 0) (gt $percent 70) -}}
            {{- color "yellow" $formatted -}}
          {{- else if lt $memoryMB 128 -}}
            {{- color "green" $formatted -}}
          {{- else if lt $memoryMB 512 -}}
            {{- color "yellow" $formatted -}}
          {{- else -}}
            {{- color "red" $formatted -}}
          {{- end -}}
        {{- end -}}
      sortable: true
      sortKey: "memoryUsage"
      
    - name: IP
      width: 15
      priority: 3
      template: |
        {{- if .status.podIP -}}
          {{- .status.podIP -}}
        {{- else -}}
          {{- color "gray" "-" -}}
        {{- end -}}
      sortable: true
      
    - name: NODE
      width: 20
      priority: 3
      template: |
        {{- if .spec.nodeName -}}
          {{- .spec.nodeName -}}
        {{- else -}}
          {{- color "gray" "<pending>" -}}
        {{- end -}}
      sortable: true
      
  # Operations available for this resource
  operations:
    - name: describe
      key: "d"
      description: "Describe pod"
      command: "kubectl describe pod {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: logs
      key: "l"
      description: "View logs"
      command: "kubectl logs {{ .metadata.name }} -n {{ .metadata.namespace }}"
      requiresRunning: true
      
    - name: exec
      key: "e"
      description: "Execute shell"
      command: "kubectl exec -it {{ .metadata.name }} -n {{ .metadata.namespace }} -- /bin/sh"
      requiresRunning: true
      
    - name: delete
      key: "x"
      description: "Delete pod"
      confirm: true
      confirmMessage: "Delete pod {{ .metadata.name }}?"
      command: "kubectl delete pod {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: edit
      key: "E"
      description: "Edit pod"
      command: "kubectl edit pod {{ .metadata.name }} -n {{ .metadata.namespace }}"
      
    - name: port-forward
      key: "p"
      description: "Port forward"
      command: "kubectl port-forward {{ .metadata.name }} -n {{ .metadata.namespace }}"
      requiresRunning: true
      interactive: true
      
  # Grouping configuration
  grouping:
    enabled: true
    groupBy: 
      - field: ".metadata.labels.app"
        name: "Application"
        icon: "📦"
      - field: ".metadata.ownerReferences[0].name"
        name: "Owner"
        icon: "👤"
      - field: ".spec.nodeName"
        name: "Node"
        icon: "🖥️"
    aggregations:
      - column: "CPU"
        function: "sum"
        format: "{{ . | toMillicores }}m total"
      - column: "MEMORY"
        function: "sum"
        format: "{{ . | humanizeBytes }} total"
      - column: "READY"
        function: "fraction"
        format: "{{ .ready }}/{{ .total }} pods ready"
      - column: "RESTARTS"
        function: "sum"
        format: "{{ . }} total restarts"
        
  # Filtering options
  filters:
    - name: "Running Only"
      key: "r"
      condition: '.status.phase == "Running"'
    - name: "Failed/Error"
      key: "f"
      condition: '.status.phase == "Failed" or .status.phase == "Error"'
    - name: "High Restarts"
      key: "h"
      condition: |
        {{- $restarts := 0 -}}
        {{- range .status.containerStatuses -}}
          {{- $restarts = add $restarts .restartCount -}}
        {{- end -}}
        {{- gt $restarts 5 -}}